head(bat)
ind <- bat$N2>10  # indicator for records with N2>=11 (among those with N1>=11)#
#
tse.hat.zero <- sum(   (  ( bat$X2 - bat$X1 )^2 - 1/ ( 4 * bat$N2 )  )[ind]   )#
#
# grand mean#
tse.hat.delta.gm <- sum(   (  ( bat$X2 - mean(bat$X1) )^2 - 1/ ( 4 * bat$N2 )  )[ind]   )#
tse.hat.delta.gm/tse.hat.zero#
#
# XKB theta.hat.M#
delta.M <- thetahat.M(bat$X1,1/(4 * bat$N1))#
tse.hat.delta.M <- sum(   (  ( bat$X2 - delta.M )^2 - 1/ ( 4 * bat$N2 )  )[ind]   )#
tse.hat.delta.M/tse.hat.zero#
#
# XKB theta.hat.SG#
delta.SG <- thetahat.SG(X=bat$X1,A=1/(4 * bat$N1))#
tse.hat.delta.SG <- sum(   (  ( bat$X2 - delta.SG )^2 - 1/ ( 4 * bat$N2 )  )[ind]   )#
tse.hat.delta.SG/tse.hat.zero#
#
# group-linear#
  # num bins = n^1/3#
delta.gl <- grouplinear(x=bat$X1, v=1/(4 * bat$N1))#
tse.hat.delta.gl <- sum(   (  ( bat$X2 - delta.gl )^2 - 1/ ( 4 * bat$N2 )  )[ind]   )#
tse.hat.delta.gl/tse.hat.zero
# URE#
  # i) split into k intervals of equal length on log(v)#
min.diff <- min(diff( sort(log( 1/(4 * bat$N1) )) )[diff( sort(log( 1/(4 * bat$N1) )) )>0])  # min_{i,j: v_i != v_j} |v_i-v_j|#
kmax <- ceiling( diff(range(log( 1/(4 * bat$N1) )))/min.diff )#
sure.vec <- rep(NA,kmax)#
#
sure.vec[1] <- sure.spher(bat$X1,1/(4 * bat$N1))#
for (k in 2:30){#
	sure.vec[k] <- sure.grouplinear(bat$X1,1/(4 * bat$N1),nbreak=k)#
}#
khat.sure <- which.min(sure.vec) # 4#
delta.gl.sure <- if(khat.sure>1) grouplinear( bat$X1,1/(4 * bat$N1),nbreak=khat.sure ) else spher(bat$X1,1/(4 * bat$N1))#
tse.hat.delta.gl.sure <- sum(   (  ( bat$X2 - delta.gl.sure )^2 - 1/ ( 4 * bat$N2 )  )[ind]   )#
tse.hat.delta.gl.sure/tse.hat.zero  # 0.34
n <- length(x)
n <- length(bat$N1)
a=matrix(rep(0,n*n),ncol=n)
a
DynamicSure=function(x,v){#
    a=matrix(rep(0,n*n),ncol=n) ##separation#
	b=a ##value#
	n <- length(x)#
	for(i in 1:n){#
		a[i,i]=i#
		b[i,i]=v[i]#
	}#
	for (l in 1:n){#
		for (i in 1:(n-l+1)){#
			j=l+i#
			sure=sure.spher(x[i,j], v[i,j])#
			a[i,j]=j#
			for (k in i:(j-1)){#
				temp=sure.spher(x[i,k], v[i,k])+sure.spher(x[k+1,j], v[k+1,j])#
				if (sure>temp){#
					sure=temp#
					a[i,j]=k#
					b[i,j]=sure#
				}#
			}#
		}#
	}#
}
DynamicSure=function(x,v){#
    a=matrix(rep(0,n*n),ncol=n) ##separation#
	b=a ##value#
	n <- length(x)#
	for(i in 1:n){#
		a[i,i]=i#
		b[i,i]=v[i]#
	}#
	for (l in 1:n){#
		for (i in 1:(n-l+1)){#
			j=l+i#
			sure=sure.spher(x[i,j], v[i,j])#
			a[i,j]=j#
			for (k in i:(j-1)){#
				temp=sure.spher(x[i,k], v[i,k])+sure.spher(x[k+1,j], v[k+1,j])#
				if (sure>temp){#
					sure=temp#
					a[i,j]=k#
					b[i,j]=sure#
				}#
			}#
		}#
	}#
	b[1,n]#
}
DynamicSure(bat$N1,bat$X1)
DynamicSure=function(x,v){#
    a=matrix(rep(0,n*n),ncol=n) ##separation#
	b=a ##value#
	n <- length(x)#
	for(i in 1:n){#
		a[i,i]=i#
		b[i,i]=v[i]#
	}#
	for (l in 1:n){#
		for (i in 1:(n-l+1)){#
			j=l+i#
			sure=sure.spher(x[i:j], v[i:j])#
			a[i,j]=j#
			for (k in i:(j-1)){#
				temp=sure.spher(x[i:k], v[i:k])+sure.spher(x[(k+1):j], v[(k+1):j])#
				if (sure>temp){#
					sure=temp#
					a[i,j]=k#
					b[i,j]=sure#
				}#
			}#
		}#
	}#
	b[1,n]#
}
DynamicSure(bat$N1,bat$X1)
sure.spher(1m1)
sure.spher(1,11)
sure.spher(1,1)
sure.spher(1,1)
var(1)
sure.spher(1,1)
sure.spher <- function(x.,v.){#
	n. <- length(x.)#
  if (n.==0) {0 #
  }else if ( (n.==1) ) {sum(v.)  #| (var(x.)==0) #
  }else {	# can set sure to an arbitrary value if var(x.)=0, since this event is of measure zero#
	cstar <- 1-2*( max(v.)/mean(v.) )/(n.-1) * ( 1-2*( max(v.)/mean(v.) )/(n.-1) > 0 )#
	b <- cstar * mean(v.)/var(x.)#
  b <- min(1,b)#
	db <- -cstar * mean(v.)/(var(x.))^2 * ( cstar * mean(v.)/var(x.) < 1 )###
	sum(   v. + ( b * (x.-mean(x.)) )^2 - 2 * v. * (  (1-1/n.) * b + 2 * (x.-mean(x.))^2 * db/(n.-1)  )   )#
	}#
}''
sure.spher <- function(x.,v.){#
	n. <- length(x.)#
  if (n.==0) {0 #
  }else if ( (n.==1) ) {sum(v.)  #| (var(x.)==0) #
  }else {	# can set sure to an arbitrary value if var(x.)=0, since this event is of measure zero#
	cstar <- 1-2*( max(v.)/mean(v.) )/(n.-1) * ( 1-2*( max(v.)/mean(v.) )/(n.-1) > 0 )#
	b <- cstar * mean(v.)/var(x.)#
  b <- min(1,b)#
	db <- -cstar * mean(v.)/(var(x.))^2 * ( cstar * mean(v.)/var(x.) < 1 )###
	sum(   v. + ( b * (x.-mean(x.)) )^2 - 2 * v. * (  (1-1/n.) * b + 2 * (x.-mean(x.))^2 * db/(n.-1)  )   )#
	}#
}
DynamicSure=function(x,v){#
    a=matrix(rep(0,n*n),ncol=n) ##separation#
	b=a ##value#
	n <- length(x)#
	for(i in 1:n){#
		a[i,i]=i#
		b[i,i]=v[i]#
	}#
	for (l in 1:n){#
		for (i in 1:(n-l+1)){#
			j=l+i#
			sure=sure.spher(x[i:j], v[i:j])#
			a[i,j]=j#
			for (k in i:(j-1)){#
				temp=sure.spher(x[i:k], v[i:k])+sure.spher(x[(k+1):j], v[(k+1):j])#
				if (sure>temp){#
					sure=temp#
					a[i,j]=k#
					b[i,j]=sure#
				}#
			}#
		}#
	}#
	b[1,n]#
}
DynamicSure(bat$N1,bat$X1)
print(a)
DynamicSure=function(x,v){#
    a=matrix(rep(0,n*n),ncol=n) ##separation#
	b=a ##value#
	n <- length(x)#
	for(i in 1:n){#
		a[i,i]=i#
		b[i,i]=v[i]#
	}#
	for (l in 1:n){#
		for (i in 1:(n-l+1)){#
			j=l+i#
			sure=sure.spher(x[i:j], v[i:j])#
			print(sure)#
			a[i,j]=j#
			for (k in i:(j-1)){#
				temp=sure.spher(x[i:k], v[i:k])+sure.spher(x[(k+1):j], v[(k+1):j])#
				if (sure>temp){#
					sure=temp#
					a[i,j]=k#
					b[i,j]=sure#
				}#
			}#
		}#
	}#
	b[1,n]#
}#
#
DynamicSure(bat$N1,bat$X1)
DynamicSure=function(x,v){#
    a=matrix(rep(0,n*n),ncol=n) ##separation#
	b=a ##value#
	n <- length(x)#
	for(i in 1:n){#
		a[i,i]=i#
		b[i,i]=v[i]#
	}#
	for (l in 1:n){#
		print(l)#
		for (i in 1:(n-l+1)){#
		    print(i)#
			j=l+i#
			sure=sure.spher(x[i:j], v[i:j])#
			print(sure)#
			a[i,j]=j#
			for (k in i:(j-1)){#
				print(k)#
				temp=sure.spher(x[i:k], v[i:k])+sure.spher(x[(k+1):j], v[(k+1):j])#
				if (sure>temp){#
					sure=temp#
					a[i,j]=k#
					b[i,j]=sure#
				}#
			}#
		}#
	}#
	b[1,n]#
}#
#
DynamicSure(bat$N1,bat$X1)
DynamicSure(bat$X1,1/(4 * bat$N1))
index=order(bat$N1,decreasing=TRUE)#
bat=bat[index,]
head(bat)
DynamicSure(bat$X1,1/(4 * bat$N1))
temp=sure.spher(x[108:108], v[108:108])+sure.spher(x[109:109], v[109:109])
sure.spher(x[108:108], v[108:108])
v=1/(4 * bat$N1)
x=bat$X1
DynamicSure(bat$X1,1/(4 * bat$N1))
temp=sure.spher(x[108:108], v[108:108])+sure.spher(x[109:109], v[109:109])
temp
sure.spher(x[109:110], v[109:110])
x[109:110]
v[109:110]
n. <- length(x.)
x.=x
v.=v
n. <- length(x.)
n
n.
x.=x[109:110]
v.=v[109:110]
n. <- length(x.)
n.
cstar <- 1-2*( max(v.)/mean(v.) )/(n.-1) * ( 1-2*( max(v.)/mean(v.) )/(n.-1) > 0 )
cstar
1-2*( max(v.)/mean(v.) )/(n.-1)
( 1-2*( max(v.)/mean(v.) )/(n.-1) > 0 )
1-2*( max(v.)/mean(v.) )/(n.-1) * ( 1-2*( max(v.)/mean(v.) )/(n.-1) > 0 )
min(1,2)
min(1,0)
cstar <- max( 1-2*( max(v.)/mean(v.) )/(n.-1), 0)
cstar
cstar=1
b <- cstar * mean(v.)/var(x.)#
  b <- min(1,b)
b
db <- -cstar * mean(v.)/(var(x.))^2 * ( cstar * mean(v.)/var(x.) < 1 )###
	sum(   v. + ( b * (x.-mean(x.)) )^2 - 2 * v. * (  (1-1/n.) * b + 2 * (x.-mean(x.))^2 * db/(n.-1)  )   )
db <- -cstar * mean(v.)/(var(x.))^2 * ( cstar * mean(v.)/var(x.) < 1 )
db
cstar * mean(v.)/var(x.) < 1
x.
v.
a
a=c(1,2,3)
a
a^2
FALSE-1
FALSE
FALSE*1
2<1
3>1
2<1*(-1)
as.numerical(FALSE)
as.numeric(FALSE)
# Group-linear Functions#
#
# "2014-11-13 11:33:34 EST"#
#
## spherically symmetric estimator with c_n = c^*_n#
spher <- function(x.,v.){#
n. <- length(x.)#
if ( (n.==1) | (var(x.)==0) ) x. else {#
	cstar <- max( 1-2*( max(v.)/mean(v.) )/(n.-1), 0)#
	bhat <- min( cstar*mean(v.)/var(x.), 1 )#
	x. - bhat*(x. - mean(x.))#
	}#
}#
## spherically symmetric estimator with c_n = c^*_n, shrinkage toward zero#
spher.zero <- function(x.,v.){#
  n. <- length(x.)#
  cstar <- max( 1-2*( max(v.)/mean(v.) )/n., 0)#
  bhat <- min( cstar*mean(v.)/mean(x.^2), 1 )#
  (1- bhat)*x.#
}#
#
## function that returns the common bhat (replicated)#
spher.bhat <- function(x.,v.){#
  n. <- length(x.)#
  if ( (n.==1) | (var(x.)==0) ) x. else {#
    cstar <- max( 1-2*( max(v.)/mean(v.) )/(n.-1), 0)#
    bhat <- min( cstar*mean(v.)/var(x.), 1 )#
    return(rep(bhat,n.))#
  }#
}#
#
## group-linear estimator#
#
grouplinear <- function( x,v,nbreak=floor(length(x)^(1/3)) ){  # default: bin log(v) into same NUMBER (=n^(1/3) of intervals#
  n <- length(x)#
  splitby=cut(log(v),breaks=nbreak, labels=F)#
	xsub <- split(x,splitby)#
	vsub <- split(v,splitby)#
	indexsub <- split(1:n,splitby)#
	thetahatsub <- mapply(spher,xsub,vsub)#
	indexsub.unlist <- as.vector( unlist(indexsub) )#
	thetahatsub.unlist <- as.vector( unlist(thetahatsub) )#
	thetahat <- thetahatsub.unlist[order(indexsub.unlist)]	#
	return(thetahat)#
}#
#
## group-linear estimator with shrinkage toward zero#
#
grouplinear.zero <- function( x,v,nbreak=floor(length(x)^(1/3)) ){  # default: bin log(v) into same NUMBER (=n^(1/3) of intervals#
  n <- length(x)#
  splitby=cut(log(v),breaks=nbreak, labels=F)#
  xsub <- split(x,splitby)#
  vsub <- split(v,splitby)#
  indexsub <- split(1:n,splitby)#
  thetahatsub <- mapply(spher.zero,xsub,vsub)#
  indexsub.unlist <- as.vector( unlist(indexsub) )#
  thetahatsub.unlist <- as.vector( unlist(thetahatsub) )#
  thetahat <- thetahatsub.unlist[order(indexsub.unlist)]	#
  return(thetahat)#
}#
#
# # ## example#
# n <- 300#
# v <- runif(n,.1,1)#
# theta <- v-mean(v)#
# x <- rnorm(n,theta,sd=sqrt(v))#
# grouplinear(x,v)#
# mean( (grouplinear(x,v)-theta)^2 )   #
# mean( (grouplinear.zero(x,v)-theta)^2 )   #
## sure for grouplinear estimator#
#
sure.spher <- function(x.,v.){#
  n. <- length(x.)#
  cstar <- max( 1-2*( max(v.)/mean(v.) )/(n.-1), 0) ##modified#
  if (n.==0) {0 #
  }else if (cstar==0){#
  	sum(v.) #
  }#
  else if ( (n.<3) ) {sum(v.)  #| (var(x.)==0) #
  }#
  else if (var(x.)==0){#
  	(2-n.)/n.*sum(v.)+sum((x.-mean(x.))^2)#
  }#
  else {	# can set sure to an arbitrary value if var(x.)=0, since this event is of measure zero#
	#cstar <- max( 1-2*( max(v.)/mean(v.) )/(n.-1), 0) ##modified#
	b <- cstar * mean(v.)/var(x.)#
    b <- min(1,b)#
	db <- -cstar * mean(v.)/(var(x.))^2 * as.numeric( cstar * mean(v.)/var(x.) < 1 )###
	sum(   v. + ( b * (x.-mean(x.)) )^2 - 2 * v. * (  (1-1/n.) * b + 2 * (x.-mean(x.))^2 * db/(n.-1)  )   )#
	}#
}#
sure.spher.zero <- function(x.,v.){#
  if (n.==0) {0 #
  }else if ( (n.==1) | (var(x.)==0) ) {sum(v.) #
  }else {	# can set sure to an arbitrary value if var(x.)=0, since this event is of measure zero#
    cstar <- 1-2*max(v.)/sum(v.) * ( 1-2*max(v.)/sum(v.) > 0 )#
    b <- cstar * mean(v.)/mean(x.^2)#
    b <- min(1,b)#
    db <- -cstar * mean(v.)/mean(x.^2)^2 * ( cstar * mean(v.)/mean(x.^2) < 1 )#
    sum(   v. + ( b * (x.) )^2 - 2 * v. * (  b + 2 * x.^2 * db/n.  )   )#
  }#
}#
#
sure.grouplinear <- function(x,v,nbreak){ #nbreak=num of bins#
	n <- length(x)#
	splitby=cut(log(v),breaks=nbreak)#
	xsub <- split(x,splitby)#
	vsub <- split(v,splitby)#
	suresub <- mapply(sure.spher,xsub,vsub)#
	sum(suresub)/n#
}#
#
sure.grouplinear.zero <- function(x,v,nbreak){ #nbreak=num of bins#
  n <- length(x)#
  splitby=cut(log(v),breaks=nbreak)#
  xsub <- split(x,splitby)#
  vsub <- split(v,splitby)#
  suresub <- mapply(sure.spher.zero,xsub,vsub)#
  sum(suresub)/n#
}
DynamicSure(bat$X1,1/(4 * bat$N1))
length(bat$N1)
DynamicSure=function(x,v){#
    a=matrix(rep(0,n*n),ncol=n) ##separation#
	b=a ##value#
	n <- length(x)#
	for(i in 1:n){#
		a[i,i]=i#
		b[i,i]=v[i]#
	}#
	for (l in 1:n){#
		print(l)#
		for (i in 1:(n-l)){#
		    print(i)#
			j=l+i#
			sure=sure.spher(x[i:j], v[i:j])#
			print(sure)#
			a[i,j]=j#
			for (k in i:(j-1)){#
				print(k)#
				temp=sure.spher(x[i:k], v[i:k])+sure.spher(x[(k+1):j], v[(k+1):j])#
				if (sure>temp){#
					sure=temp#
					a[i,j]=k#
					b[i,j]=sure#
				}#
			}#
		}#
	}#
	b[1,n]#
}
DynamicSure(bat$X1,1/(4 * bat$N1))
DynamicSure=function(x,v){#
    a=matrix(rep(0,n*n),ncol=n) ##separation#
	b=a ##value#
	n <- length(x)#
	for(i in 1:n){#
		a[i,i]=i#
		b[i,i]=v[i]#
	}#
	for (l in 1:n){#
		print(l)#
		for (i in 1:(n-l)){#
			j=l+i#
			sure=sure.spher(x[i:j], v[i:j])#
			a[i,j]=j#
			for (k in i:(j-1)){#
				temp=sure.spher(x[i:k], v[i:k])+sure.spher(x[(k+1):j], v[(k+1):j])#
				if (sure>temp){#
					sure=temp#
					print(sure)#
					a[i,j]=k#
					b[i,j]=sure#
				}#
			}#
		}#
	}#
	b[1,n]#
}
DynamicSure(bat$X1,1/(4 * bat$N1))
DynamicSure=function(x,v){#
    a=matrix(rep(0,n*n),ncol=n) ##separation#
	b=a ##value#
	n <- length(x)#
	for(i in 1:n){#
		a[i,i]=i#
		b[i,i]=v[i]#
	}#
	for (l in 1:n){#
		print(l)#
		for (i in 1:(n-l)){#
			j=l+i#
			sure=sure.spher(x[i:j], v[i:j])#
			a[i,j]=j#
			for (k in i:(j-1)){#
				temp=sure.spher(x[i:k], v[i:k])+sure.spher(x[(k+1):j], v[(k+1):j])#
				if (sure>temp){#
					sure=temp#
				#	print(sure)#
					a[i,j]=k#
					b[i,j]=sure#
				}#
			}#
		}#
	}#
	b[1,n]#
}
DynamicSure(bat$X1,1/(4 * bat$N1))
DynamicSure(bat$X1[1:50],1/(4 * bat$N1)[1:50])
sure.spher <- function(x.,v.){#
  n. <- length(x.)#
 # cstar <- max( 1-2*( max(v.)/mean(v.) )/(n.-1), 0) ##modified#
  if (n.==0) {NULL #
  } else if ( (n.<3) ) {sum(v.)  #| (var(x.)==0) #
  }#
  else if (max( 1-2*( max(v.)/mean(v.) )/(n.-1), 0)==0){#
  	sum(v.) #
  }#
  else if (var(x.)==0){#
  	(2-n.)/n.*sum(v.)+sum((x.-mean(x.))^2)#
  }#
  else {	# can set sure to an arbitrary value if var(x.)=0, since this event is of measure zero#
	cstar <- max( 1-2*( max(v.)/mean(v.) )/(n.-1), 0) ##modified#
	b <- cstar * mean(v.)/var(x.)#
    b <- min(1,b)#
	db <- -cstar * mean(v.)/(var(x.))^2 * as.numeric( cstar * mean(v.)/var(x.) < 1 )###
	sum(   v. + ( b * (x.-mean(x.)) )^2 - 2 * v. * (  (1-1/n.) * b + 2 * (x.-mean(x.))^2 * db/(n.-1)  )   )#
	}#
}
DynamicSure(bat$X1[1:50],1/(4 * bat$N1)[1:50])
DynamicSure=function(x,v){#
    a=matrix(rep(0,n*n),ncol=n) ##separation#
	b=a ##value#
	n <- length(x)#
	for(i in 1:n){#
		a[i,i]=i#
		b[i,i]=v[i]#
	}#
	for (l in 1:n){#
		print(l)#
		for (i in 1:(n-l)){#
			j=l+i#
			sure=sure.spher(x[i:j], v[i:j])#
			print(sure)#
			a[i,j]=j#
			for (k in i:(j-1)){#
				temp=sure.spher(x[i:k], v[i:k])+sure.spher(x[(k+1):j], v[(k+1):j])#
				if (sure>temp){#
					sure=temp#
				#	print(sure)#
					a[i,j]=k#
					b[i,j]=sure#
				}#
			}#
		}#
	}#
	b[1,n]#
}
DynamicSure(bat$X1[1:20],1/(4 * bat$N1)[1:20])
DynamicSure=function(x,v){#
    a=matrix(rep(0,n*n),ncol=n) ##separation#
	b=a ##value#
	n <- length(x)#
	for(i in 1:n){#
		a[i,i]=i#
		b[i,i]=v[i]#
	}#
	for (l in 1:(n-1)){#
		print(l)#
		for (i in 1:(n-l)){#
			j=l+i#
			sure=sure.spher(x[i:j], v[i:j])#
			print(sure)#
			a[i,j]=j#
			for (k in i:(j-1)){#
				temp=sure.spher(x[i:k], v[i:k])+sure.spher(x[(k+1):j], v[(k+1):j])#
				if (sure>temp){#
					sure=temp#
				#	print(sure)#
					a[i,j]=k#
					b[i,j]=sure#
				}#
			}#
		}#
	}#
	b[1,n]#
}
DynamicSure(bat$X1[1:20],1/(4 * bat$N1)[1:20])
b=DynamicSure(bat$X1[1:20],1/(4 * bat$N1)[1:20])
b
DynamicSure=function(x,v){#
    a=matrix(rep(0,n*n),ncol=n) ##separation#
	b=a ##value#
	n <- length(x)#
	for(i in 1:n){#
		a[i,i]=i#
		b[i,i]=v[i]#
	}#
	for (l in 1:(n-1)){#
		print(l)#
		for (i in 1:(n-l)){#
			j=l+i#
			sure=sure.spher(x[i:j], v[i:j])#
			print(sure)#
			a[i,j]=j#
			for (k in i:(j-1)){#
				temp=sure.spher(x[i:k], v[i:k])+sure.spher(x[(k+1):j], v[(k+1):j])#
				if (sure>temp){#
					sure=temp#
				#	print(sure)#
					a[i,j]=k#
					b[i,j]=sure#
				}#
			}#
		}#
	}#
	list(a,b)#
}
b=DynamicSure(bat$X1[1:20],1/(4 * bat$N1)[1:20])
b
b$a
b$b
c=DynamicSure(bat$X1[1:20],1/(4 * bat$N1)[1:20])
a=c[[1]]
dim(a)
DynamicSure=function(x,v){#
    n <- length(x)#
    a=matrix(rep(0,n*n),ncol=n) ##separation#
	b=a ##value#
	for(i in 1:n){#
		a[i,i]=i#
		b[i,i]=v[i]#
	}#
	for (l in 1:(n-1)){#
		print(l)#
		for (i in 1:(n-l)){#
			j=l+i#
			sure=sure.spher(x[i:j], v[i:j])#
			print(sure)#
			a[i,j]=j#
			for (k in i:(j-1)){#
				temp=sure.spher(x[i:k], v[i:k])+sure.spher(x[(k+1):j], v[(k+1):j])#
				if (sure>temp){#
					sure=temp#
				#	print(sure)#
					a[i,j]=k#
					b[i,j]=sure#
				}#
			}#
		}#
	}#
	list(a,b)#
}
c=DynamicSure(bat$X1[1:20],1/(4 * bat$N1)[1:20])
c[[1]]
c[[2]]
partition=function(position,i,j,par=NULL){#
	n=dim(position)[1]#
	if (position[i,j]==j){#
		par=c(par,j)	#
	}#
	else{#
		par=c(partition(i,position[i,j]),par)#
		par=c(par,partition(i,position[i,j]))#
	}#
}
group=partition(c[[1]])
n=length(x)
group=partition(c[[1]],1,n)
n=20
group=partition(c[[1]],1,n)
partition=function(position,i,j,par=NULL){#
	n=dim(position)[1]#
	if (position[i,j]==j){#
		par=c(par,j)	#
	}#
	else{#
		par=c(partition(position,i,position[i,j]),par)#
		par=c(par,partition(position,i,position[i,j]))#
	}#
}
group=partition(c[[1]],1,n)
group
c[[1]]
partition=function(position,i,j,par=NULL){#
	n=dim(position)[1]#
	if (position[i,j]==j){#
		par=c(par,j)	#
	}#
	else{#
		par=c(partition(position,i,position[i,j]),par)#
		par=c(par,partition(position,i,position[i,j]))#
	}#
	return par#
}
partition=function(position,i,j,par=NULL){#
	n=dim(position)[1]#
	if (position[i,j]==j){#
		par=c(par,j)	#
	}#
	else{#
		par=c(partition(position,i,position[i,j]),par)#
		par=c(par,partition(position,i,position[i,j]))#
	}#
	return par#
}
partition=function(position,i,j,par=NULL){#
	n=dim(position)[1]#
	if (position[i,j]==j){#
		par=c(par,j)	#
	}#
	else{#
		par=c(partition(position,i,position[i,j]),par)#
		par=c(par,partition(position,i,position[i,j]))#
	}#
	return par#
}
partition=function(position,i,j,par=NULL){#
	n=dim(position)[1]#
	if (position[i,j]==j){#
		par=c(par,j)	#
	}#
	else{#
		par=c(partition(position,i,position[i,j]),par)#
		par=c(par,partition(position,i,position[i,j]))#
	}#
	#return par#
}
partition=function(position,i,j,par=NULL){#
	n=dim(position)[1]#
	if (position[i,j]==j){#
		par=c(par,j)	#
	}#
	else{#
		par=c(partition(position,i,position[i,j]),par)#
		par=c(par,partition(position,i,position[i,j]))#
	}#
	return(par)#
}
group=partition(c[[1]],1,n)
group
a=c[[1]]
a[1,n]
a[1,18]
a[18,20]
partition=function(position,i,j,par=NULL){#
	n=dim(position)[1]#
	if (position[i,j]==j){#
		par=c(par,j)	#
	}#
	else{#
		par=c(partition(position,i,position[i,j]),par)#
		par=c(par,partition(position,position[i,j],j))#
	}#
	return(par)#
}
group=partition(c[[1]],1,n)
group
c=DynamicSure(bat$X1[1:50],1/(4 * bat$N1)[1:50])
group=partition(c[[1]],1,n)
group
group=partition(c[[1]],1,n)
group
n
n=50
group=partition(c[[1]],1,n)
n
partition=function(position,i,j,par=NULL){#
	n=dim(position)[1]#
	if (position[i,j]==j){#
		par=c(par,j)	#
	}#
	else{#
		par=c(partition(position,i,position[i,j]),par)#
		par=c(par,partition(position,position[i,j],j))#
	}#
#	return(par)#
}
group=partition(c[[1]],1,n)
group=partition(c[[1]],1,20)
group
group=partition(c[[1]],1,10)
group
group=partition(c[[1]],1,30)
group
group=partition(c[[1]],1,40)
group
group=partition(c[[1]],1,50)
group=partition(c[[1]],1,45)
group=partition(c[[1]],1,42)
group=partition(c[[1]],1,41)
group=partition(c[[1]],1,40)
partition=function(position,i,j,par=NULL){#
	if (position[i,j]==j){#
		par=j#
	}#
	else{#
		par=c(partition(position,i,position[i,j]),par)#
		par=c(par,partition(position,position[i,j],j))#
	}#
#	return(par)#
}
n=50
c=DynamicSure(bat$X1[1:n],1/(4 * bat$N1)[1:n])
group=partition(c[[1]],1,40)
group
group
group=partition(c[[1]],1,41)
group=partition(c[[1]],1,50)
partition=function(position,i,j,par=NULL){#
	if (position[i,j]==j){#
		par=j#
	}#
	else{#
		par=c(partition(position,i,position[i,j]),par)#
		par=c(par,partition(position,position[i,j],j))#
	}#
	return(par)#
}
group=partition(c[[1]],1,40)
group=partition(c[[1]],1,n)
partition=function(position,i,j,par=NULL){#
	if (position[i,j]==j){#
		par=j#
		return(par)#
	}#
	else{#
		par=c(partition(position,i,position[i,j]),par)#
		par=c(par,partition(position,position[i,j],j))#
		return(par)#
	}#
}
group=partition(c[[1]],1,n)
n
options(expressions=10000)
group=partition(c[[1]],1,n)
options(expressions=50000)
group=partition(c[[1]],1,n)
foo <- function() {#
    bar <<- 1#
}#
foo()#
bar
foo <- function() {#
	     position=c[[1]]#
}#
foo()
partition=function(i,j,par=NULL){#
	if (position[i,j]==j){#
		par=j#
		return(par)#
	}#
	else{#
		par=c(partition(i,position[i,j]),par)#
		par=c(par,partition(position[i,j],j))#
		return(par)#
	}#
}
group=partition(position,1,n)
foo <- function() {#
	     position=c[[1]]#
}#
foo()
position
foo <- function() {#
	     position<<-c[[1]]#
}#
foo()
group=partition(position,1,n)
group=partition(position,1,10)
foo <- function() {#
	     position<<-c[[1]]#
}#
foo()
partition=function(i,j,par=NULL){#
	if (position[i,j]==j){#
		par=j#
		return(par)#
	}#
	else{#
		par=c(partition(i,position[i,j]),par)#
		par=c(par,partition(position[i,j],j))#
		return(par)#
	}#
}
group=partition(position,1,10)
partition=function(position,i,j,par=NULL){#
	if (position[i,j]==j){#
		par=j#
		return(par)#
	}#
	else{#
		par=c(partition(position,i,position[i,j]),par)#
		par=c(par,partition(position,position[i,j],j))#
		return(par)#
	}#
}
group=partition(position,1,n)
group=partition(position,1,10)
group
group=partition(position,1,40)#
group
group=partition(position,1,42)#
group
group=partition(position,1,50)
group
group=partition(position,1,50)#
group
position[1,n]
n=50
position[1,n]
partition=function(position,i,j,par=NULL){#
	if (position[i,j]==j){#
		par=j#
		return(par)#
	}#
	else{#
		par=c(partition(position,i,position[i,j]),position[i,j])#
		par=c(par,partition(position,position[i,j],j))#
		return(par)#
	}#
}
group=partition(position,1,50)
group
position[1,n]
position[1,37]
position[1,36]
position[1,18]
position[37,50]
position[37,50]
partition=function(position,i,j){#
	if (position[i,j]==j){#
		par=j#
		return(par)#
	}#
	else{#
		par=c(partition(position,i,position[i,j]),position[i,j])#
		par=c(par,partition(position,position[i,j],j))#
		return(par)#
	}#
}
group=partition(position,1,50)
group=partition(position,1,20)
group
position[1,20]
position[18,20]
position[1,18]
group=partition(position,1,40)
group
position[1,40]
position[18,40]
position[18,40]
group=partition(position,1,30)
group
partition(position,1,30)
partition(position,1,25)
position[1,25]
position[18,25]
partition(position,1,50)
partition(position,1,40)
partition(position,1,42)
partition=function(position,i,j){#
	if (position[i,j]==j){#
		par=j#
		return(par)#
	}#
	else{#
		#par=c(partition(position,i,position[i,j]),position[i,j])#
		#par=c(par,partition(position,position[i,j],j))#
		#return(par)#
		a=partition(position,i,position[i,j])#
		b=partition(position,position[i,j],j)#
		return((a,position[i,j],b))#
	}#
}
partition=function(position,i,j){#
	if (position[i,j]==j){#
		par=j#
		return(par)#
	}#
	else{#
		#par=c(partition(position,i,position[i,j]),position[i,j])#
		#par=c(par,partition(position,position[i,j],j))#
		#return(par)#
		a=partition(position,i,position[i,j])#
		b=partition(position,position[i,j],j)#
		return(a,position[i,j],b)#
	}#
}
group=partition(position,1,40)
partition=function(position,i,j){#
	if (position[i,j]==j){#
		par=j#
		return(par)#
	}#
	else{#
		#par=c(partition(position,i,position[i,j]),position[i,j])#
		#par=c(par,partition(position,position[i,j],j))#
		#return(par)#
		a=partition(position,i,position[i,j])#
		b=partition(position,position[i,j],j)#
		return(c(a,position[i,j],b))#
	}#
}
group=partition(position,1,40)
group
group=partition(position,1,20)
group
group=partition(position,1,50)
group=partition(position,1,50)
group
partition=function(position,i,j){#
	if (position[i,j]==j){#
		return(j)#
	}#
	else{#
		#par=c(partition(position,i,position[i,j]),position[i,j])#
		#par=c(par,partition(position,position[i,j],j))#
		#return(par)#
		a=partition(position,i,position[i,j])#
		b=partition(position,position[i,j],j)#
		return(c(a,position[i,j],b))#
	}#
}
group=partition(position,1,50)
options( expressions = 5e5 )
group=partition(position,1,50)
options( expressions = 5e10 )
options( expressions = 5e8 )
options( expressions = 5e6 )
options( expressions = 5e5 )
group=partition(position,1,50)
group
